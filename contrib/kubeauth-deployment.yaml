#Config map for glauth
apiVersion: v1
kind: ConfigMap
metadata:
  name: glauth-config
  labels:
    app: kubeauth
data:
  glauth.cfg: |
    debug = true

    [ldap]
      enabled = true
      # run on a non privileged port
      listen = "0.0.0.0:3893"

    [ldaps]
    # to enable ldaps genrerate a certificate, eg. with:
    # openssl req -x509 -newkey rsa:4096 -keyout glauth.key -out glauth.crt -days 365 -nodes -subj '/CN=`hostname`'
      enabled = false
      listen = "0.0.0.0:3894"
      cert = "glauth.crt"
      key = "glauth.key"

    #################
    # The backend section controls the data store.
    [backend]
      datastore = "config"
      baseDN = "dc=glauth,dc=com"
      nameformat = "cn"
      groupformat = "ou"

    [behaviors]
      # Ignore all capabilities restrictions, for instance allowing every user to perform a search
      IgnoreCapabilities = false
      # Enable a "fail2ban" type backoff mechanism temporarily banning repeated failed login attempts
      LimitFailedBinds = true
      # How many failed login attempts are allowed before a ban is imposed
      NumberOfFailedBinds = 3
      # How long (in seconds) is the window for failed login attempts
      PeriodOfFailedBinds = 10
      # How long (in seconds) is the ban duration
      BlockFailedBindsFor = 60
      # Clean learnt IP addresses every N seconds
      PruneSourceTableEvery = 600
      # Clean learnt IP addresses not seen in N seconds
      PruneSourcesOlderThan = 600

    #################
    # This user record shows all of the possible fields available
    [[users]]
      name = "alice"
      givenname="alice"
      sn="alisson" #sn is the surname
      mail = "alice@metzler.systems"
      uidnumber = 5002
      primarygroup = 5501 #Has to be id not a string... LIKE WHY
      loginShell = "/bin/sh"
      homeDir = "/root"
      passsha256 = "cb824cd5fe4950a77e36776d275f8f7039682babd490d5da3bc8fd31f4c2254c" # alicepassword
      #sshkeys = ["ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEA3UKCEllO2IZXgqNygiVb+dDLJJwVw3AJwV34t2jzR+/tUNVeJ9XddKpYQektNHsFmY93lJw5QDSbeH/mAC4KPoUM47EriINKEelRbyG4hC/ko/e2JWqEclPS9LP7GtqGmscXXo4JFkqnKw4TIRD52XI9n1syYM9Y8rJ88fjC/Lpn+01AB0paLVIfppJU35t0Ho9doHAEfEvcQA6tcm7FLJUvklAxc8WUbdziczbRV40KzDroIkXAZRjX7vXXhh/p7XBYnA0GO8oTa2VY4dTQSeDAUJSUxbzevbL0ll9Gi1uYaTDQyE5gbn2NfJSqq0OYA+3eyGtIVjFYZgi+txSuhw== rsa-key-20160209"]

    [[users]]
      name = "serviceuser"
      mail = "serviceuser@example.com"
      uidnumber = 5003
      primarygroup = 5502
      passsha256 = "652c7dc687d98c9889304ed2e408c74b611e86a40caa51c4b43f1dd5913c5cd0" # mysecret
        [[users.capabilities]]
        action = "search"
        object = "*"


    #################
    # The groups section contains a hardcoded list of valid users.
    [[groups]]
      name = "superheros"
      gidnumber = 5501

    [[groups]]
      name = "svcaccts"
      gidnumber = 5502

    #################
    # Enable and configure the optional REST API here.
    [api]
      enabled = true
      internals = true # debug application performance
      tls = false # enable TLS for production!!
      listen = "0.0.0.0:5555"
      cert = "cert.pem"
      key = "key.pem"

---
#Deployment of the kubeauth pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeauth
  labels:
    app: kubeauth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeauth
  template:
    metadata:
      labels:
        app: kubeauth
    spec:
      containers:
      - name: kubeauth
        image: ghcr.io/miathedev/kubeauth:main
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
          requests:
            memory: "64Mi"
            cpu: "250m"
        env:
        - name: LDAP_SERVER_URL
          value: "ldap://localhost:3893"
        - name: LDAP_BIND_DN
          value: "dc=glauth,dc=com"
        - name: LDAP_SERVICE_ACCOUNT
          value: "serviceuser"
        - name: LDAP_SERVICE_PASSWORD
          value: "mysecret"
        #CMD args
        args: ["-a", "ldap_auth"]

      - name: glauth
        image: glauth/glauth
        imagePullPolicy: Always
        ports:
        - containerPort: 3893
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
          requests:
            memory: "64Mi"
            cpu: "250m"
        #glauth config
        volumeMounts:
        - name: glauth-config
          mountPath: /etc/glauth
          readOnly: true
        args: ["-f", "/etc/glauth"]
      volumes:
      - name: glauth-config
        configMap:
          name: glauth-config
          items:
          - key: glauth.cfg
            path: glauth.cfg
      

